# app/management/commands/generate_production_data.py
import random
import math
import gc
import psutil
import os
from datetime import date, timedelta, datetime
import numpy as np
from django.core.management.base import BaseCommand
from django.db import transaction, connection
from django.utils import timezone
from django.db.models import Q, Count, Avg, Sum
from app.models import (
    Donor, Site, Department, Patient, BloodRecord,
    BloodUnit, BloodRequest, BloodConsumption, Prevision
)


class Command(BaseCommand):
    help = 'G√©n√®re des donn√©es MASSIVES et INTELLIGENTES pour ML optimis√© - Render 512MB'

    def add_arguments(self, parser):
        parser.add_argument(
            '--donors',
            type=int,
            default=8000,
            help='Nombre de donneurs (d√©faut: 8000)'
        )
        parser.add_argument(
            '--patients',
            type=int,
            default=2500,
            help='Nombre de patients (d√©faut: 2500)'
        )
        parser.add_argument(
            '--history-days',
            type=int,
            default=50,
            help='Jours d\'historique pass√© (d√©faut: 50)'
        )
        parser.add_argument(
            '--forecast-days',
            type=int,
            default=350,
            help='Jours de pr√©visions futures (d√©faut: 350)'
        )
        parser.add_argument(
            '--scale-factor',
            type=float,
            default=1.0,
            help='Facteur d\'√©chelle pour les volumes (d√©faut: 1.0)'
        )
        parser.add_argument(
            '--memory-optimize',
            action='store_true',
            help='Mode optimisation m√©moire extr√™me pour Render'
        )
        parser.add_argument(
            '--force-clean',
            action='store_true',
            help='Nettoyer avant g√©n√©ration'
        )

    def handle(self, *args, **options):
        self.donors_count = options['donors']
        self.patients_count = options['patients']
        self.history_days = options['history_days']
        self.forecast_days = options['forecast_days']
        self.scale_factor = options['scale_factor']
        self.memory_optimize = options['memory_optimize']

        # Optimisation m√©moire Render
        self.batch_size = 500 if self.memory_optimize else 1000
        self.chunk_size = 7 if self.memory_optimize else 14  # jours par chunk

        self.stdout.write('üöÄ G√âN√âRATEUR ML ULTRA-OPTIMIS√â - RENDER 512MB')
        self.stdout.write('=' * 60)
        self.stdout.write(f'üìä Donneurs: {self.donors_count:,}')
        self.stdout.write(f'üè• Patients: {self.patients_count:,}')
        self.stdout.write(f'üìÖ Historique: {self.history_days} jours')
        self.stdout.write(f'üîÆ Pr√©visions: {self.forecast_days} jours')
        self.stdout.write(f'üíæ Batch size: {self.batch_size}')
        self.stdout.write(f'üß† M√©moire optimis√©e: {"‚úÖ" if self.memory_optimize else "‚ùå"}')

        # Monitoring m√©moire
        self.log_memory_usage("D√©but")

        try:
            if options['force_clean']:
                self.clean_existing_data()

            # G√©n√©ration en phases pour optimiser m√©moire
            self.create_infrastructure()
            self.create_population()
            self.generate_historical_patterns()
            self.generate_future_forecasts()
            self.create_database_indexes()
            self.generate_quality_report()

        except MemoryError:
            self.stdout.write(self.style.ERROR('‚ùå Erreur m√©moire - R√©duction automatique'))
            self.emergency_memory_cleanup()
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur: {e}'))
            import traceback
            traceback.print_exc()

    def log_memory_usage(self, phase):
        """Monitoring m√©moire en temps r√©el"""
        try:
            process = psutil.Process(os.getpid())
            memory_info = process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024
            self.stdout.write(f'üñ•Ô∏è {phase}: {memory_mb:.1f} MB utilis√©s')

            if memory_mb > 450:  # Seuil d'alerte Render
                self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è M√©moire critique: {memory_mb:.1f} MB'))
                self.emergency_memory_cleanup()
        except:
            pass

    def emergency_memory_cleanup(self):
        """Nettoyage m√©moire d'urgence"""
        gc.collect()
        connection.close()

    def clean_existing_data(self):
        """Nettoyage optimis√© avec gestion m√©moire"""
        self.stdout.write('üßπ Nettoyage intelligent des donn√©es...')

        # D√©sactivation des contraintes temporairement
        with connection.cursor() as cursor:
            cursor.execute('SET session_replication_role = replica;')

            # Suppression en ordre inverse pour √©viter les contraintes FK
            tables = [
                'app_prevision', 'app_bloodconsumption', 'app_bloodrequest',
                'app_bloodunit', 'app_bloodrecord', 'app_patient',
                'app_department', 'app_donor', 'app_site'
            ]

            for table in tables:
                cursor.execute(f'TRUNCATE TABLE "{table}" CASCADE')
                self.stdout.write(f'  ‚úÖ {table}')

            cursor.execute('SET session_replication_role = DEFAULT;')
            cursor.execute('VACUUM ANALYZE;')

        gc.collect()
        self.log_memory_usage("Post-nettoyage")

    def create_infrastructure(self):
        """Cr√©er l'infrastructure hospitali√®re camerounaise"""
        self.stdout.write('üè• Cr√©ation infrastructure hospitali√®re...')

        # Sites hospitaliers majeurs du Cameroun avec donn√©es r√©alistes
        sites_data = [
            # Douala - Centre √©conomique
            ('SITE_CHU_DLA', 'CHU de Douala', 'Douala', 'hospital', 'Bonanjo', 400, True, 'Littoral'),
            ('SITE_LAQ_DLA', 'H√¥pital Laquintinie', 'Douala', 'hospital', 'Deido', 300, True, 'Littoral'),
            ('SITE_CNTS_DLA', 'CNTS Douala', 'Douala', 'collection_center', 'Akwa', 150, True, 'Littoral'),

            # Yaound√© - Capitale
            ('SITE_CHU_YDE', 'CHU de Yaound√©', 'Yaound√©', 'hospital', 'Melen', 450, True, 'Centre'),
            ('SITE_CENTRAL_YDE', 'H√¥pital Central', 'Yaound√©', 'hospital', 'Centre-ville', 350, True, 'Centre'),
            ('SITE_GYNECO_YDE', 'H√¥pital Gyn√©co-Obst√©trique', 'Yaound√©', 'hospital', 'Biyem-Assi', 200, True, 'Centre'),

            # Centres r√©gionaux
            ('SITE_REG_BFM', 'H√¥pital R√©gional Bafoussam', 'Bafoussam', 'hospital', 'Centre', 250, True, 'Ouest'),
            ('SITE_REG_BMD', 'Bamenda Regional Hospital', 'Bamenda', 'hospital', 'Centre', 220, True, 'Nord-Ouest'),
            ('SITE_REG_GAR', 'H√¥pital R√©gional Garoua', 'Garoua', 'hospital', 'Centre', 200, False, 'Nord'),
            ('SITE_REG_NGD', 'H√¥pital R√©gional Ngaound√©r√©', 'Ngaound√©r√©', 'hospital', 'Centre', 180, False, 'Adamaoua'),

            # H√¥pitaux sp√©cialis√©s
            ('SITE_MIL_YDE', 'H√¥pital Militaire Yaound√©', 'Yaound√©', 'hospital', 'Ngoa-Ekell√©', 150, True, 'Centre'),
            ('SITE_PEDIA_DLA', 'H√¥pital P√©diatrique Douala', 'Douala', 'hospital', 'Bonapriso', 120, True, 'Littoral'),
        ]

        sites = []
        for site_data in sites_data:
            site_id, nom, ville, type_site, address, capacity, blood_bank, region = site_data

            site, created = Site.objects.get_or_create(
                site_id=site_id,
                defaults={
                    'nom': nom,
                    'ville': ville,
                    'type': type_site,
                    'address': address,
                    'capacity': capacity,
                    'region': region,
                    'status': 'active',
                    'blood_bank': blood_bank,
                    'current_patients': random.randint(int(capacity * 0.6), int(capacity * 0.9))
                }
            )
            sites.append(site)

        self.stdout.write(f'  ‚úÖ {len(sites)} sites cr√©√©s')

        # D√©partements sp√©cialis√©s par site
        departments = self.create_specialized_departments(sites)
        self.stdout.write(f'  ‚úÖ {len(departments)} d√©partements cr√©√©s')

        self.sites = sites
        self.departments = departments
        self.log_memory_usage("Infrastructure")

    def create_specialized_departments(self, sites):
        """Cr√©er des d√©partements sp√©cialis√©s r√©alistes"""

        # Templates de d√©partements selon le type et la taille d'h√¥pital
        dept_templates = {
            'major': [  # CHU et grands h√¥pitaux
                ('URG', 'Urgences', 'emergency', 60, True, 0.8),
                ('CHIR_GEN', 'Chirurgie G√©n√©rale', 'surgery', 50, True, 0.9),
                ('CHIR_CARD', 'Chirurgie Cardiaque', 'surgery', 25, True, 0.95),
                ('CARDIO', 'Cardiologie', 'cardiology', 30, True, 0.7),
                ('PEDIATR', 'P√©diatrie', 'pediatrics', 40, True, 0.6),
                ('GYNECO', 'Gyn√©co-Obst√©trique', 'gynecology', 45, True, 0.85),
                ('HEMATO', 'H√©matologie-Oncologie', 'oncology', 20, True, 0.95),
                ('REANIM', 'R√©animation', 'intensive_care', 15, True, 1.0),
                ('NEPHRO', 'N√©phrologie', 'nephrology', 18, True, 0.4),
                ('ORTHO', 'Orthop√©die', 'orthopedics', 35, True, 0.75),
            ],
            'regional': [  # H√¥pitaux r√©gionaux
                ('URG', 'Urgences', 'emergency', 30, True, 0.7),
                ('CHIR_GEN', 'Chirurgie G√©n√©rale', 'surgery', 25, True, 0.8),
                ('PEDIATR', 'P√©diatrie', 'pediatrics', 25, True, 0.6),
                ('GYNECO', 'Maternit√©', 'gynecology', 30, True, 0.8),
                ('MED_INT', 'M√©decine Interne', 'internal_medicine', 35, True, 0.3),
                ('CARDIO', 'Cardiologie', 'cardiology', 15, True, 0.6),
            ],
            'specialized': [  # H√¥pitaux sp√©cialis√©s
                ('SPEC_1', 'Service Principal', 'general', 40, True, 0.9),
                ('SPEC_2', 'Service Secondaire', 'general', 20, True, 0.6),
                ('URG', 'Urgences', 'emergency', 15, True, 0.7),
            ]
        }

        departments = []

        for site in sites:
            # D√©terminer le template selon la capacit√©
            if site.capacity >= 300:
                template_type = 'major'
            elif site.capacity >= 150:
                template_type = 'regional'
            else:
                template_type = 'specialized'

            templates = dept_templates[template_type]

            for dept_code, name, dept_type, base_beds, needs_blood, blood_intensity in templates:
                dept_id = f"{dept_code}_{site.site_id}"

                # Ajuster selon la taille du site
                bed_capacity = max(5, int(base_beds * (site.capacity / 400)))
                occupancy = random.randint(
                    int(bed_capacity * 0.6),
                    min(bed_capacity, int(bed_capacity * 0.95))
                )

                # Consommation mensuelle de sang bas√©e sur l'intensit√©
                monthly_usage = 0
                if needs_blood:
                    monthly_usage = max(1, int(occupancy * blood_intensity * random.uniform(0.8, 1.2)))

                try:
                    dept, created = Department.objects.get_or_create(
                        department_id=dept_id,
                        defaults={
                            'site': site,
                            'name': name,
                            'department_type': dept_type,
                            'description': f'{name} - {site.nom}',
                            'bed_capacity': bed_capacity,
                            'current_occupancy': occupancy,
                            'staff_count': max(5, bed_capacity // 3),
                            'monthly_blood_usage': monthly_usage,
                            'is_active': True,
                            'requires_blood_products': needs_blood,
                            'is_emergency_department': dept_type == 'emergency'
                        }
                    )
                    departments.append(dept)

                except Exception as e:
                    self.stdout.write(f'  ‚ö†Ô∏è Erreur d√©partement {dept_id}: {str(e)[:30]}')

            # Nettoyage m√©moire p√©riodique
            if len(departments) % 20 == 0:
                gc.collect()

        return departments

    def create_population(self):
        """Cr√©er populations de donneurs et patients avec distribution r√©aliste"""
        self.stdout.write('üë• Cr√©ation population camerounaise...')

        # Distribution r√©aliste des groupes sanguins au Cameroun
        blood_distribution = {
            'O+': 0.45, 'A+': 0.30, 'B+': 0.15, 'AB+': 0.05,
            'O-': 0.025, 'A-': 0.015, 'B-': 0.008, 'AB-': 0.002
        }

        # Donn√©es anthroponymiques camerounaises par r√©gion
        name_data = self.get_cameroon_names_data()

        # 1. Cr√©er les donneurs
        self.create_donors_optimized(blood_distribution, name_data)

        # 2. Cr√©er les patients
        self.create_patients_optimized(blood_distribution, name_data)

        self.log_memory_usage("Population")

    def get_cameroon_names_data(self):
        """Noms camerounais authentiques par r√©gion linguistique"""
        return {
            'francophone': {
                'male': [
                    'Jean', 'Paul', 'Pierre', 'Andr√©', 'Emmanuel', 'Joseph', 'Martin', 'Fran√ßois',
                    'Alain', 'Bernard', 'Philippe', 'Daniel', 'Marcel', 'Christophe', 'Vincent',
                    'Roger', 'Michel', 'Laurent', 'Julien', 'Olivier', 'Pascal', 'Thierry'
                ],
                'female': [
                    'Marie', 'Fran√ßoise', 'Jeanne', 'Catherine', 'Anne', 'Christine', 'Monique',
                    'Nicole', 'Brigitte', 'Martine', 'Dominique', 'Isabelle', 'Nathalie',
                    'Sandrine', 'V√©ronique', 'C√©cile', 'Sylvie', 'Claudine', 'Bernadette'
                ],
                'surnames': [
                    'Mballa', 'Ngoua', 'Bekono', 'Ateba', 'Fouda', 'Meka', 'Olinga', 'Ayissi',
                    'Talla', 'Kamga', 'Fogue', 'Temgoua', 'Djuikom', 'Youmbi', 'Feudjio', 'Tchinda',
                    'Ngono', 'Owona', 'Essomba', 'Biloa', 'Mengue', 'Ebang', 'Mvogo', 'Abena'
                ]
            },
            'anglophone': {
                'male': [
                    'John', 'Paul', 'Peter', 'James', 'David', 'Michael', 'Robert', 'William',
                    'Thomas', 'Charles', 'Christopher', 'Daniel', 'Matthew', 'Anthony', 'Donald',
                    'Kenneth', 'Joshua', 'Kevin', 'Brian', 'George', 'Edward', 'Ronald'
                ],
                'female': [
                    'Mary', 'Patricia', 'Jennifer', 'Linda', 'Elizabeth', 'Barbara', 'Susan',
                    'Jessica', 'Sarah', 'Karen', 'Nancy', 'Lisa', 'Betty', 'Helen', 'Sandra',
                    'Donna', 'Carol', 'Ruth', 'Sharon', 'Michelle', 'Laura', 'Emily'
                ],
                'surnames': [
                    'Njume', 'Tabi', 'Fru', 'Che', 'Nkeng', 'Sama', 'Mbah', 'Ngwa',
                    'Titanji', 'Asongwe', 'Nfor', 'Agbor', 'Ngole', 'Tabot', 'Ako', 'Ewane'
                ]
            },
            'northern': {
                'male': [
                    'Ahmadou', 'Ousmane', 'Ibrahim', 'Moussa', 'Abdoulaye', 'Hamidou', 'Alhadji',
                    'Bouba', 'Issa', 'Amadou', 'Oumarou', 'Souley', 'Mahamat', 'Adam', 'Hassan'
                ],
                'female': [
                    'Aissatou', 'Fatimata', 'Salamatou', 'Hadjara', 'Maimouna', 'Ramatou',
                    'Adama', 'Zeinabou', 'Mariam', 'Djamila', 'Khadija', 'Aminata', 'Oumou'
                ],
                'surnames': [
                    'Bello', 'Issa', 'Hamadou', 'Moustapha', 'Boubakari', 'Alioum', 'Amadou',
                    'Oumarou', 'Hayatou', 'Danpullo', 'Abbo', 'Mohamadou', 'Yerima', 'Baba'
                ]
            }
        }

    def create_donors_optimized(self, blood_distribution, name_data):
        """Cr√©er donneurs avec optimisation m√©moire"""
        self.stdout.write(f'  üíâ G√©n√©ration {self.donors_count:,} donneurs...')

        regions = list(name_data.keys())
        blood_types = list(blood_distribution.keys())
        blood_weights = list(blood_distribution.values())

        created_count = 0

        for batch_start in range(0, self.donors_count, self.batch_size):
            batch_donors = []
            current_batch_size = min(self.batch_size, self.donors_count - batch_start)

            for i in range(current_batch_size):
                donor_num = batch_start + i + 1

                # S√©lection r√©gion et noms
                region = random.choice(regions)
                names = name_data[region]

                gender = random.choice(['M', 'F'])
                blood_type = random.choices(blood_types, weights=blood_weights)[0]

                # Distribution d'√¢ge r√©aliste pour donneurs (18-65 ans)
                age_weights = [0.25, 0.30, 0.25, 0.15, 0.05]  # 18-25, 26-35, 36-45, 46-55, 56-65
                age_ranges = [(18, 25), (26, 35), (36, 45), (46, 55), (56, 65)]
                age_range = random.choices(age_ranges, weights=age_weights)[0]
                age = random.randint(age_range[0], age_range[1])

                birth_date = date.today() - timedelta(days=age * 365 + random.randint(0, 365))

                # G√©n√©ration ID et noms
                donor_id = f"DON{str(donor_num).zfill(7)}"
                first_name = random.choice(names['male'] if gender == 'M' else names['female'])
                last_name = random.choice(names['surnames'])

                # T√©l√©phone camerounais
                operators = ['650', '651', '652', '653', '654', '655', '656', '657', '658', '659',
                             '690', '691', '692', '693', '694', '695', '696', '697', '698', '699']
                phone = f"{random.choice(operators)}{random.randint(100000, 999999)}"

                batch_donors.append(Donor(
                    donor_id=donor_id,
                    first_name=first_name,
                    last_name=last_name,
                    date_of_birth=birth_date,
                    gender=gender,
                    blood_type=blood_type,
                    phone_number=phone
                ))

            # Insertion batch optimis√©e
            try:
                Donor.objects.bulk_create(batch_donors, batch_size=self.batch_size)
                created_count += len(batch_donors)

                if created_count % 2000 == 0:
                    self.stdout.write(f'    üíâ {created_count:,} donneurs cr√©√©s...')
                    gc.collect()  # Nettoyage m√©moire

            except Exception as e:
                self.stdout.write(f'    ‚ö†Ô∏è Erreur batch donneurs: {str(e)[:40]}')

        self.stdout.write(f'  ‚úÖ {created_count:,} donneurs cr√©√©s')
        self.donors = list(Donor.objects.all())

    def create_patients_optimized(self, blood_distribution, name_data):
        """Cr√©er patients avec pathologies r√©alistes"""
        self.stdout.write(f'  üè• G√©n√©ration {self.patients_count:,} patients...')

        # Pathologies n√©cessitant transfusions par groupe d'√¢ge
        pathologies_by_age = {
            'pediatric': [
                'An√©mie s√©v√®re du nourrisson', 'Leuc√©mie lymphoblastique aigu√´',
                'Thalass√©mie majeure', 'Dr√©panocytose compliqu√©e', 'Aplasie m√©dullaire cong√©nitale'
            ],
            'adult': [
                'H√©morragie obst√©tricale', 'Accident de la circulation avec polytraumatisme',
                'Chirurgie cardiaque programm√©e', 'Cancer colorectal avec m√©tastases',
                'Insuffisance r√©nale chronique terminale', 'Leuc√©mie aigu√´ my√©loblastique'
            ],
            'elderly': [
                'H√©morragie digestive haute sur ulc√®re', 'My√©lome multiple', 'An√©mie des maladies chroniques',
                'Chirurgie orthop√©dique majeure', 'Syndrome my√©lodysplasique', 'Cancer de la prostate avanc√©'
            ]
        }

        blood_types = list(blood_distribution.keys())
        blood_weights = list(blood_distribution.values())

        created_count = 0

        for batch_start in range(0, self.patients_count, self.batch_size):
            batch_patients = []
            current_batch_size = min(self.batch_size, self.patients_count - batch_start)

            for i in range(current_batch_size):
                patient_num = batch_start + i + 1

                # Distribution d'√¢ge r√©aliste pour patients n√©cessitant transfusions
                age_categories = [
                    (0, 17, 0.15, 'pediatric'),  # P√©diatrie
                    (18, 50, 0.45, 'adult'),  # Adultes
                    (51, 90, 0.40, 'elderly')  # Personnes √¢g√©es
                ]

                age_cat = random.choices(
                    [(min_age, max_age, cat) for min_age, max_age, _, cat in age_categories],
                    weights=[weight for _, _, weight, _ in age_categories]
                )[0]

                age = random.randint(age_cat[0], age_cat[1])
                age_category = age_cat[2]

                birth_date = date.today() - timedelta(days=age * 365 + random.randint(0, 365))

                patient_id = f"PAT{str(patient_num).zfill(7)}"
                blood_type = random.choices(blood_types, weights=blood_weights)[0]

                # Pathologie selon l'√¢ge
                pathology = random.choice(pathologies_by_age[age_category])

                # Noms anonymis√©s pour patients
                patient = Patient(
                    patient_id=patient_id,
                    first_name=f'Patient_{patient_num:05d}',
                    last_name='Anonyme',
                    date_of_birth=birth_date,
                    gender=random.choice(['M', 'F']),
                    blood_type=blood_type,
                    patient_history=pathology
                )
                batch_patients.append(patient)

            # Insertion
            try:
                Patient.objects.bulk_create(batch_patients, batch_size=self.batch_size)
                created_count += len(batch_patients)

                if created_count % 1000 == 0:
                    self.stdout.write(f'    üè• {created_count:,} patients cr√©√©s...')
                    gc.collect()

            except Exception as e:
                self.stdout.write(f'    ‚ö†Ô∏è Erreur batch patients: {str(e)[:40]}')

        self.stdout.write(f'  ‚úÖ {created_count:,} patients cr√©√©s')
        self.patients = list(Patient.objects.all())

    def generate_historical_patterns(self):
        """G√©n√©rer patterns historiques intelligents pour ML"""
        self.stdout.write('üìä G√©n√©ration patterns historiques ML...')

        start_date = date.today() - timedelta(days=self.history_days)
        collection_sites = [s for s in self.sites if s.blood_bank]
        blood_departments = [d for d in self.departments if d.requires_blood_products]

        self.stdout.write(f'  üìÖ P√©riode: {start_date} ‚Üí {date.today()}')
        self.stdout.write(f'  üè• {len(collection_sites)} sites de collecte')
        self.stdout.write(f'  ü©∏ {len(blood_departments)} d√©partements consommateurs')

        # G√©n√©ration par chunks pour optimiser m√©moire
        for chunk_start in range(0, self.history_days, self.chunk_size):
            chunk_end = min(chunk_start + self.chunk_size, self.history_days)
            chunk_start_date = start_date + timedelta(days=chunk_start)
            chunk_days = chunk_end - chunk_start

            self.stdout.write(f'  üìä Chunk jours {chunk_start}-{chunk_end} ({chunk_start_date.strftime("%m/%d")})')

            # 1. G√©n√©rer collectes avec patterns saisonniers
            self.generate_collections_chunk(
                collection_sites, chunk_start_date, chunk_days
            )

            # 2. G√©n√©rer demandes et consommations
            self.generate_demands_chunk(
                blood_departments, chunk_start_date, chunk_days
            )

            # Nettoyage m√©moire entre chunks
            gc.collect()
            self.log_memory_usage(f"Chunk {chunk_start}-{chunk_end}")

        self.stdout.write('  ‚úÖ Patterns historiques g√©n√©r√©s')

    def generate_collections_chunk(self, collection_sites, start_date, days_count):
        """G√©n√©rer collectes avec patterns camerounais r√©alistes"""

        records_batch = []
        units_batch = []

        for day_offset in range(days_count):
            current_date = start_date + timedelta(days=day_offset)

            # Facteurs saisonniers camerounais
            seasonal_factor = self.get_cameroon_seasonal_factor(current_date.month, 'collection')

            # Facteur jour de la semaine (moins de collectes weekend)
            weekday = current_date.weekday()
            weekday_factors = [1.0, 1.0, 1.0, 1.0, 0.9, 0.4, 0.3]  # Lun-Dim
            weekday_factor = weekday_factors[weekday]

            # √âv√©nements sp√©ciaux camerounais
            event_factor = self.get_cameroon_event_factor(current_date)

            # Calcul collections quotidiennes
            base_collections = 25 * self.scale_factor
            daily_collections = max(1, int(
                np.random.poisson(base_collections * seasonal_factor * weekday_factor * event_factor)
            ))

            # G√©n√©rer les collectes
            for _ in range(daily_collections):
                site = random.choice(collection_sites)
                donor = random.choice(self.donors)

                record_id = f"REC{len(records_batch) + 1:08d}_{current_date.strftime('%Y%m%d')}"

                # Screening avec taux de r√©ussite r√©aliste (96% au Cameroun)
                screening_valid = random.random() < 0.96
                if screening_valid:
                    screening_result = 'Valid'
                else:
                    rejection_reasons = [
                        'Rejected_HIV', 'Rejected_HBV', 'Rejected_HCV',
                        'Rejected_Syphilis', 'Rejected_Hemoglobin'
                    ]
                    screening_result = random.choice(rejection_reasons)

                record = BloodRecord(
                    record_id=record_id,
                    site=site,
                    screening_results=screening_result,
                    record_date=current_date,
                    quantity=1
                )
                records_batch.append(record)

                # Cr√©er unit√© si screening valide
                if screening_valid:
                    unit_id = f"UNIT{len(units_batch) + 1:08d}_{current_date.strftime('%Y%m%d')}"

                    # Param√®tres physiologiques r√©alistes
                    volume_ml = random.randint(420, 480)  # Volume standard collect√©
                    hemoglobin = round(random.uniform(12.5, 17.5), 1)
                    expiry_date = current_date + timedelta(days=42)  # Validit√© standard

                    # Statut selon l'√¢ge de l'unit√©
                    days_old = (date.today() - current_date).days
                    if expiry_date <= date.today():
                        status = 'Expired'
                    elif days_old > 35:  # Proche expiration
                        status = random.choices(['Available', 'Used'], weights=[0.1, 0.9])[0]
                    elif days_old > 21:  # Moyen terme
                        status = random.choices(['Available', 'Used'], weights=[0.4, 0.6])[0]
                    else:  # R√©cent
                        status = random.choices(['Available', 'Used'], weights=[0.8, 0.2])[0]

                    unit = BloodUnit(
                        unit_id=unit_id,
                        donor=donor,
                        record=record,
                        collection_date=current_date,
                        volume_ml=volume_ml,
                        hemoglobin_g_dl=hemoglobin,
                        date_expiration=expiry_date,
                        status=status
                    )
                    units_batch.append(unit)

        # Insertion optimis√©e par batch
        if records_batch:
            try:
                BloodRecord.objects.bulk_create(records_batch, batch_size=self.batch_size)
                self.stdout.write(f'    üìù {len(records_batch):,} records cr√©√©s')

                # R√©cup√©rer records cr√©√©s pour liaison FK
                created_records = {r.record_id: r for r in BloodRecord.objects.filter(
                    record_id__in=[r.record_id for r in records_batch]
                )}

                # Mettre √† jour FK des unit√©s
                for unit in units_batch:
                    if unit.record.record_id in created_records:
                        unit.record = created_records[unit.record.record_id]

                BloodUnit.objects.bulk_create(units_batch, batch_size=self.batch_size)
                self.stdout.write(f'    ü©∏ {len(units_batch):,} unit√©s cr√©√©es')

            except Exception as e:
                self.stdout.write(f'    ‚ö†Ô∏è Erreur collectes: {str(e)[:40]}')

    def generate_demands_chunk(self, blood_departments, start_date, days_count):
        """G√©n√©rer demandes et consommations avec patterns hospitaliers"""

        requests_batch = []
        consumptions_batch = []
        blood_types = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-']

        for day_offset in range(days_count):
            current_date = start_date + timedelta(days=day_offset)

            # Facteurs de demande camerounais
            seasonal_factor = self.get_cameroon_seasonal_factor(current_date.month, 'demand')
            weekday = current_date.weekday()

            # Plus de demandes urgentes weekend (accidents)
            weekday_factors = [1.0, 1.0, 1.0, 1.0, 1.1, 1.4, 1.3]
            weekday_factor = weekday_factors[weekday]

            # √âv√©nements et f√™tes (plus d'accidents)
            event_factor = self.get_cameroon_event_factor(current_date)

            # Demandes quotidiennes par d√©partement
            for dept in blood_departments:
                # Demandes bas√©es sur la taille et le type du d√©partement
                base_demand = self.calculate_department_base_demand(dept)

                daily_requests = max(0, int(
                    np.random.poisson(base_demand * seasonal_factor * weekday_factor * event_factor)
                ))

                for _ in range(daily_requests):
                    blood_type = self.select_blood_type_for_department(dept, blood_types)
                    quantity = self.calculate_request_quantity(dept)
                    priority = self.determine_request_priority(dept, weekday)

                    request_id = f"REQ{len(requests_batch) + 1:08d}_{current_date.strftime('%Y%m%d')}"

                    # Statut bas√© sur l'anciennet√© et le type de d√©partement
                    days_old = (date.today() - current_date).days
                    status = self.determine_request_status(days_old, priority, dept)

                    request = BloodRequest(
                        request_id=request_id,
                        department=dept,
                        site=dept.site,
                        blood_type=blood_type,
                        quantity=quantity,
                        priority=priority,
                        status=status,
                        request_date=current_date
                    )
                    requests_batch.append(request)

                    # G√©n√©rer consommations pour demandes satisfaites
                    if status == 'Fulfilled' and random.random() < 0.8:
                        self.create_consumption_for_request_chunk(
                            request, current_date, consumptions_batch
                        )

        # Insertion des demandes
        if requests_batch:
            try:
                BloodRequest.objects.bulk_create(requests_batch, batch_size=self.batch_size)
                self.stdout.write(f'    üìã {len(requests_batch):,} demandes cr√©√©es')

                # Consommations
                if consumptions_batch:
                    # R√©cup√©rer demandes cr√©√©es
                    created_requests = {r.request_id: r for r in BloodRequest.objects.filter(
                        request_id__in=[r.request_id for r in requests_batch]
                    )}

                    # Mettre √† jour FK
                    for consumption in consumptions_batch:
                        if consumption.request.request_id in created_requests:
                            consumption.request = created_requests[consumption.request.request_id]

                    BloodConsumption.objects.bulk_create(consumptions_batch, batch_size=self.batch_size)
                    self.stdout.write(f'    üíâ {len(consumptions_batch):,} transfusions cr√©√©es')

            except Exception as e:
                self.stdout.write(f'    ‚ö†Ô∏è Erreur demandes: {str(e)[:40]}')

    def get_cameroon_seasonal_factor(self, month, pattern_type):
        """Facteurs saisonniers sp√©cifiques au Cameroun"""

        if pattern_type == 'collection':
            # Collections: Impact saison s√®che vs pluies, p√©riodes scolaires
            factors = {
                1: 0.9,  # Janvier - Post f√™tes, saison s√®che
                2: 1.1,  # F√©vrier - Campagnes, saison s√®che
                3: 1.2,  # Mars - Pic campagnes
                4: 1.0,  # Avril - Transition
                5: 0.8,  # Mai - D√©but pluies, moins de mobilit√©
                6: 0.7,  # Juin - Pluies intenses
                7: 0.6,  # Juillet - Pic saison pluies
                8: 0.7,  # Ao√ªt - Pluies continues
                9: 0.9,  # Septembre - Fin pluies
                10: 1.0,  # Octobre - Retour normal
                11: 1.1,  # Novembre - Campagnes rentr√©e
                12: 0.8  # D√©cembre - F√™tes, voyages
            }
        else:  # demand
            # Demandes: Accidents saison s√®che, paludisme saison pluies, f√™tes
            factors = {
                1: 1.3,  # Janvier - Accidents harmattan, saison s√®che
                2: 1.4,  # F√©vrier - Pic accidents routes poussi√©reuses
                3: 1.2,  # Mars - Accidents, chaleur extr√™me
                4: 1.0,  # Avril - Transition
                5: 0.9,  # Mai - D√©but pluies, moins accidents route
                6: 1.0,  # Juin - Paludisme, mais moins accidents
                7: 0.8,  # Juillet - Pluies, moins d√©placements
                8: 0.9,  # Ao√ªt - Paludisme saisonnier
                9: 1.1,  # Septembre - Reprise activit√©s
                10: 1.2,  # Octobre - Saison s√®che, plus d'activit√©s
                11: 1.3,  # Novembre - Pic activit√©s √©conomiques
                12: 1.1  # D√©cembre - F√™tes, voyages, accidents
            }

        return factors.get(month, 1.0)

    def get_cameroon_event_factor(self, current_date):
        """Facteurs d'√©v√©nements sp√©ciaux camerounais"""

        month = current_date.month
        day = current_date.day

        # F√™tes nationales et p√©riodes sp√©ciales
        special_events = {
            (1, 1): 0.5,  # Nouvel An
            (2, 11): 1.2,  # F√™te de la Jeunesse (plus de donneurs)
            (5, 1): 0.8,  # F√™te du Travail
            (5, 20): 1.1,  # F√™te Nationale
            (8, 15): 0.7,  # Assomption
            (12, 25): 0.6,  # No√´l
        }

        # P√©riode de Ramadan (variable selon l'ann√©e)
        if month in [3, 4, 5]:  # Approximation
            if random.random() < 0.3:  # 30% de chance d'√™tre en p√©riode Ramadan
                return 0.7  # Moins de collectes pendant Ramadan

        # P√©riode scolaire vs vacances
        if month in [7, 8, 12]:  # Grandes vacances
            return 0.8
        elif month in [1, 4, 10]:  # Rentr√©es scolaires
            return 1.1

        return special_events.get((month, day), 1.0)

    def calculate_department_base_demand(self, dept):
        """Calculer demande de base par d√©partement"""

        # Facteur par type de d√©partement
        type_factors = {
            'emergency': 2.5,
            'surgery': 2.0,
            'intensive_care': 3.0,
            'oncology': 2.2,
            'cardiology': 1.8,
            'gynecology': 1.5,
            'pediatrics': 1.3,
            'orthopedics': 1.4,
            'nephrology': 1.6,
            'internal_medicine': 1.0,
            'general': 0.8
        }

        type_factor = type_factors.get(dept.department_type, 1.0)

        # Facteur taille d√©partement
        size_factor = min(2.0, dept.current_occupancy / 20)

        # Facteur historique mensuel
        monthly_factor = min(1.5, dept.monthly_blood_usage / 10)

        return max(0.1, type_factor * size_factor * monthly_factor * self.scale_factor)

    def select_blood_type_for_department(self, dept, blood_types):
        """S√©lectionner groupe sanguin selon d√©partement"""

        # Certains d√©partements ont des patterns sp√©cifiques
        if dept.department_type in ['oncology', 'nephrology']:
            # Plus de O+ et A+ pour ces sp√©cialit√©s
            weights = [0.5, 0.35, 0.08, 0.03, 0.02, 0.015, 0.003, 0.002]
        elif dept.department_type == 'pediatrics':
            # Distribution p√©diatrique l√©g√®rement diff√©rente
            weights = [0.48, 0.28, 0.16, 0.04, 0.02, 0.015, 0.008, 0.002]
        else:
            # Distribution g√©n√©rale camerounaise
            weights = [0.45, 0.30, 0.15, 0.05, 0.025, 0.015, 0.008, 0.002]

        return random.choices(blood_types, weights=weights)[0]

    def calculate_request_quantity(self, dept):
        """Calculer quantit√© demand√©e selon d√©partement"""

        if dept.department_type in ['surgery', 'intensive_care']:
            # Chirurgie et r√©animation: quantit√©s plus importantes
            return random.choices([1, 2, 3, 4, 5, 6], weights=[0.1, 0.3, 0.3, 0.2, 0.08, 0.02])[0]
        elif dept.department_type == 'emergency':
            # Urgences: varie beaucoup selon les cas
            return random.choices([1, 2, 3, 4], weights=[0.4, 0.35, 0.2, 0.05])[0]
        elif dept.department_type in ['oncology', 'nephrology']:
            # Oncologie/n√©phrologie: souvent 1-2 unit√©s
            return random.choices([1, 2, 3], weights=[0.6, 0.35, 0.05])[0]
        else:
            # Autres: principalement 1-2 unit√©s
            return random.choices([1, 2], weights=[0.75, 0.25])[0]

    def determine_request_priority(self, dept, weekday):
        """D√©terminer priorit√© selon d√©partement et jour"""

        if dept.department_type in ['emergency', 'intensive_care']:
            # Urgences/r√©a: beaucoup d'urgent, plus le weekend
            weekend_factor = 1.3 if weekday >= 5 else 1.0
            urgent_prob = min(0.8, 0.6 * weekend_factor)
            return random.choices(['Routine', 'Urgent'], weights=[1 - urgent_prob, urgent_prob])[0]
        elif dept.department_type == 'surgery':
            # Chirurgie: plus d'urgent en semaine (programm√©s)
            urgent_prob = 0.4 if weekday < 5 else 0.2
            return random.choices(['Routine', 'Urgent'], weights=[1 - urgent_prob, urgent_prob])[0]
        else:
            # Autres: majoritairement routine
            return random.choices(['Routine', 'Urgent'], weights=[0.8, 0.2])[0]

    def determine_request_status(self, days_old, priority, dept):
        """D√©terminer statut demande selon anciennet√©"""

        if days_old > 10:  # Anciennes demandes
            return random.choices(['Fulfilled', 'Rejected'], weights=[0.92, 0.08])[0]
        elif days_old > 3:  # Demandes r√©centes
            if priority == 'Urgent':
                return random.choices(['Fulfilled', 'Pending'], weights=[0.85, 0.15])[0]
            else:
                return random.choices(['Fulfilled', 'Pending', 'Rejected'], weights=[0.75, 0.22, 0.03])[0]
        else:  # Tr√®s r√©centes
            if priority == 'Urgent':
                return random.choices(['Fulfilled', 'Pending'], weights=[0.6, 0.4])[0]
            else:
                return random.choices(['Fulfilled', 'Pending', 'Approved'], weights=[0.3, 0.5, 0.2])[0]

    def create_consumption_for_request_chunk(self, request, request_date, consumptions_batch):
        """Cr√©er consommations pour une demande (version chunk)"""

        # Rechercher unit√©s compatibles disponibles
        compatible_units = BloodUnit.objects.filter(
            donor__blood_type=request.blood_type,
            status='Available',
            collection_date__lte=request_date,
            date_expiration__gt=request_date
        )[:request.quantity]

        if not compatible_units:
            return  # Pas d'unit√©s disponibles

        for unit in compatible_units:
            patient = random.choice(self.patients)

            # Volume transfus√© (g√©n√©ralement complet)
            volume_transfused = random.randint(
                int(unit.volume_ml * 0.9),
                unit.volume_ml
            )

            # Date de transfusion (m√™me jour ou lendemain)
            consumption_date = request_date
            if random.random() < 0.2:  # 20% le lendemain
                consumption_date += timedelta(days=1)

            consumption = BloodConsumption(
                request=request,
                unit=unit,
                patient=patient,
                date=consumption_date,
                volume=volume_transfused
            )
            consumptions_batch.append(consumption)

    def generate_future_forecasts(self):
        """G√©n√©rer pr√©visions ML sophistiqu√©es"""
        self.stdout.write('üîÆ G√©n√©ration pr√©visions ML avanc√©es...')

        blood_types = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-']
        forecasts_created = 0

        for blood_type in blood_types:
            # Analyser patterns historiques pour ce groupe
            historical_stats = self.analyze_historical_patterns(blood_type)

            # G√©n√©rer pr√©visions pour les prochains jours
            for days_ahead in range(1, self.forecast_days + 1):
                future_date = date.today() + timedelta(days=days_ahead)

                # Mod√®le pr√©dictif sophistiqu√©
                predicted_volume, reliability = self.ml_predict_demand(
                    blood_type, future_date, historical_stats, days_ahead
                )

                prevision_id = f"ML_{blood_type}_{future_date.strftime('%Y%m%d')}"

                try:
                    prevision, created = Prevision.objects.get_or_create(
                        prevision_id=prevision_id,
                        defaults={
                            'blood_type': blood_type,
                            'prevision_date': future_date,
                            'previsional_volume': predicted_volume,
                            'fiability': reliability
                        }
                    )

                    if created:
                        forecasts_created += 1

                except Exception as e:
                    pass  # Ignorer erreurs individuelles

            # Log progress et nettoyage m√©moire
            if forecasts_created % 1000 == 0:
                self.stdout.write(f'  üîÆ {forecasts_created:,} pr√©visions g√©n√©r√©es...')
                gc.collect()

        self.stdout.write(f'  ‚úÖ {forecasts_created:,} pr√©visions ML cr√©√©es')
        self.log_memory_usage("Pr√©visions")

    def analyze_historical_patterns(self, blood_type):
        """Analyser patterns historiques sophistiqu√©s"""

        # Consommation par jour de la semaine
        weekday_patterns = {}
        for weekday in range(7):
            avg_consumption = BloodConsumption.objects.filter(
                unit__donor__blood_type=blood_type,
                date__week_day=weekday + 1
            ).count() / max(1, self.history_days // 7)
            weekday_patterns[weekday] = avg_consumption

        # Consommation par mois
        monthly_patterns = {}
        for month in range(1, 13):
            month_consumption = BloodConsumption.objects.filter(
                unit__donor__blood_type=blood_type,
                date__month=month
            ).count()
            monthly_patterns[month] = month_consumption / max(1, self.history_days // 30)

        # Tendance r√©cente
        recent_consumption = BloodConsumption.objects.filter(
            unit__donor__blood_type=blood_type,
            date__gte=date.today() - timedelta(days=min(30, self.history_days))
        ).count()

        older_consumption = BloodConsumption.objects.filter(
            unit__donor__blood_type=blood_type,
            date__gte=date.today() - timedelta(days=min(60, self.history_days)),
            date__lt=date.today() - timedelta(days=min(30, self.history_days))
        ).count()

        trend = (recent_consumption - older_consumption) / max(older_consumption, 1) if older_consumption > 0 else 0

        # Volatilit√© (coefficient de variation)
        daily_consumptions = []
        for i in range(min(self.history_days, 30)):
            day_date = date.today() - timedelta(days=i + 1)
            day_consumption = BloodConsumption.objects.filter(
                unit__donor__blood_type=blood_type,
                date=day_date
            ).count()
            daily_consumptions.append(day_consumption)

        if daily_consumptions:
            avg_daily = sum(daily_consumptions) / len(daily_consumptions)
            variance = sum((x - avg_daily) ** 2 for x in daily_consumptions) / len(daily_consumptions)
            volatility = math.sqrt(variance) / max(avg_daily, 1)
        else:
            volatility = 0.5  # Volatilit√© par d√©faut

        return {
            'weekday_patterns': weekday_patterns,
            'monthly_patterns': monthly_patterns,
            'recent_avg': recent_consumption / min(30, self.history_days),
            'trend': trend,
            'volatility': volatility,
            'total_historical_data': BloodConsumption.objects.filter(
                unit__donor__blood_type=blood_type
            ).count()
        }

    def ml_predict_demand(self, blood_type, future_date, historical_stats, days_ahead):
        """Mod√®le pr√©dictif ML sophistiqu√©"""

        # Base de pr√©diction
        base_demand = historical_stats['recent_avg']

        # Facteur jour de la semaine
        weekday = future_date.weekday()
        weekday_factor = historical_stats['weekday_patterns'].get(weekday, base_demand) / max(base_demand, 1)

        # Facteur saisonnier
        monthly_factor = historical_stats['monthly_patterns'].get(future_date.month, base_demand) / max(base_demand, 1)

        # Facteur de tendance avec att√©nuation temporelle
        trend_decay = math.exp(-days_ahead / 90)  # D√©croissance exponentielle
        trend_factor = 1 + (historical_stats['trend'] * trend_decay)

        # Facteur de volatilit√©
        volatility_noise = np.random.normal(0, historical_stats['volatility'] * 0.1)

        # Facteur √©v√©nementiel futur
        event_factor = self.get_cameroon_event_factor(future_date)

        # Pr√©diction finale
        predicted_volume = max(0, int(
            base_demand * weekday_factor * monthly_factor * trend_factor * event_factor * (1 + volatility_noise)
        ))

        # Calcul fiabilit√© sophistiqu√©
        data_reliability = min(0.98, 0.5 + (historical_stats['total_historical_data'] / 500) * 0.48)

        # Fiabilit√© temporelle (d√©cro√Æt avec la distance)
        time_reliability = max(0.4, 0.95 - (days_ahead / self.forecast_days) * 0.55)

        # Fiabilit√© de volatilit√© (moins fiable si tr√®s volatil)
        volatility_reliability = max(0.3, 1 - min(historical_stats['volatility'], 1) * 0.4)

        # Fiabilit√© finale pond√©r√©e
        final_reliability = (
                data_reliability * 0.4 +
                time_reliability * 0.4 +
                volatility_reliability * 0.2
        )

        return predicted_volume, round(final_reliability, 3)

    def create_database_indexes(self):
        """Cr√©er index optimis√©s pour ML"""
        self.stdout.write('üìä Optimisation index base de donn√©es...')

        indexes = [
            # Index pour requ√™tes ML temporelles
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bloodconsumption_date_bloodtype ON app_bloodconsumption USING btree (date, (SELECT blood_type FROM app_donor WHERE donor_id = app_bloodunit.donor_id));",

            # Index pour agr√©gations par site
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bloodrequest_site_date ON app_bloodrequest USING btree (site_id, request_date);",

            # Index pour patterns saisonniers
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bloodunit_collection_month ON app_bloodunit USING btree (EXTRACT(month FROM collection_date), donor_id);",

            # Index pour analyses de stock
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bloodunit_status_expiry ON app_bloodunit USING btree (status, date_expiration) WHERE status IN ('Available', 'Reserved');",

            # Index pour d√©partements consommateurs
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bloodconsumption_dept_volume ON app_bloodconsumption USING btree (request_id, volume);",
        ]

        with connection.cursor() as cursor:
            for idx_sql in indexes:
                try:
                    cursor.execute(idx_sql)
                    self.stdout.write(f'  ‚úÖ Index cr√©√©: {idx_sql.split()[5]}')
                except Exception as e:
                    if "already exists" not in str(e):
                        self.stdout.write(f'  ‚ö†Ô∏è Erreur index: {str(e)[:40]}')

        # Statistiques mise √† jour
        with connection.cursor() as cursor:
            cursor.execute('ANALYZE;')

        self.stdout.write('  ‚úÖ Optimisation termin√©e')

    def generate_quality_report(self):
        """Rapport qualit√© ML d√©taill√©"""
        self.stdout.write('\nüìã RAPPORT QUALIT√â ML - OPTIMIS√â RENDER')
        self.stdout.write('=' * 60)

        # Statistiques g√©n√©rales
        stats = {
            'Sites': Site.objects.count(),
            'D√©partements': Department.objects.count(),
            'Donneurs': Donor.objects.count(),
            'Patients': Patient.objects.count(),
            'Records de don': BloodRecord.objects.count(),
            'Unit√©s de sang': BloodUnit.objects.count(),
            'Demandes': BloodRequest.objects.count(),
            'Transfusions': BloodConsumption.objects.count(),
            'Pr√©visions ML': Prevision.objects.count()
        }

        self.stdout.write('üìä VOLUMES DE DONN√âES:')
        for category, count in stats.items():
            self.stdout.write(f'  {category:.<20} {count:,}')

        total_records = sum(stats.values())
        self.stdout.write(f'\nüìà TOTAL DONN√âES: {total_records:,} enregistrements')

        # Analyse de distribution des groupes sanguins
        self.stdout.write('\nü©∏ DISTRIBUTION GROUPES SANGUINS:')
        blood_types = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-']
        for bt in blood_types:
            donor_count = Donor.objects.filter(blood_type=bt).count()
            consumption_count = BloodConsumption.objects.filter(unit__donor__blood_type=bt).count()
            percentage = (donor_count / max(stats['Donneurs'], 1)) * 100
            self.stdout.write(
                f'  {bt:>3}: {donor_count:,} donneurs ({percentage:.1f}%) ‚Üí {consumption_count:,} transfusions')

        # Analyse temporelle
        self.stdout.write('\nüìÖ ANALYSE TEMPORELLE:')
        try:
            oldest_record = BloodRecord.objects.order_by('record_date').first()
            newest_record = BloodRecord.objects.order_by('-record_date').first()
            oldest_request = BloodRequest.objects.order_by('request_date').first()
            newest_forecast = Prevision.objects.order_by('-prevision_date').first()

            if oldest_record and newest_record:
                historical_span = (newest_record.record_date - oldest_record.record_date).days
                self.stdout.write(
                    f'  Historique collectes: {historical_span} jours ({oldest_record.record_date} ‚Üí {newest_record.record_date})')

            if oldest_request:
                self.stdout.write(f'  Premi√®re demande: {oldest_request.request_date}')

            if newest_forecast:
                forecast_span = (newest_forecast.prevision_date - date.today()).days
                self.stdout.write(f'  Pr√©visions jusqu\'au: {newest_forecast.prevision_date} (+{forecast_span} jours)')

        except Exception:
            self.stdout.write('  Donn√©es temporelles en cours de calcul...')

        # Qualit√© des donn√©es pour ML
        self.stdout.write('\nü§ñ QUALIT√â POUR MACHINE LEARNING:')

        # Densit√© de donn√©es
        if stats['Transfusions'] > 0 and self.history_days > 0:
            daily_avg_consumption = stats['Transfusions'] / self.history_days
            self.stdout.write(f'  Transfusions/jour (moyenne): {daily_avg_consumption:.1f}')

            # √âvaluation qualit√©
            quality_metrics = self.calculate_ml_quality_metrics(stats, daily_avg_consumption)

            self.stdout.write(f'  Score compl√©tude donn√©es: {quality_metrics["completeness"]:.2f}/1.00')
            self.stdout.write(f'  Score diversit√© g√©ographique: {quality_metrics["geographic_diversity"]:.2f}/1.00')
            self.stdout.write(f'  Score consistance temporelle: {quality_metrics["temporal_consistency"]:.2f}/1.00')
            self.stdout.write(f'  Score √©quilibrage groupes: {quality_metrics["blood_type_balance"]:.2f}/1.00')

            # Score global ML
            ml_score = (
                    quality_metrics["completeness"] * 0.3 +
                    quality_metrics["geographic_diversity"] * 0.2 +
                    quality_metrics["temporal_consistency"] * 0.3 +
                    quality_metrics["blood_type_balance"] * 0.2
            )

            self.stdout.write(f'\nüéØ SCORE GLOBAL ML: {ml_score:.3f}/1.000')

            # √âvaluation et recommandations
            if ml_score >= 0.85:
                self.stdout.write('  üåü EXCELLENT - Donn√©es optimales pour ML avanc√©!')
                self.stdout.write('  ‚úÖ Confiance pr√©dictive attendue: >85%')
                self.stdout.write('  üöÄ Pr√™t pour algorithmes sophistiqu√©s (LSTM, Random Forest)')
            elif ml_score >= 0.70:
                self.stdout.write('  ‚úÖ TR√àS BON - Qualit√© suffisante pour ML robuste')
                self.stdout.write('  üìä Confiance pr√©dictive attendue: 70-85%')
                self.stdout.write('  üéØ Recommand√© pour production')
            elif ml_score >= 0.55:
                self.stdout.write('  ‚ö° BON - Base solide pour ML')
                self.stdout.write('  üìà Confiance pr√©dictive attendue: 55-70%')
                self.stdout.write('  üí° Am√©lioration possible avec plus d\'historique')
            else:
                self.stdout.write('  üìä ACCEPTABLE - ML de base possible')
                self.stdout.write('  üîÑ Recommandation: Continuer collecte de donn√©es')

        # Analyse par site
        self.stdout.write('\nüè• TOP SITES G√âN√âRATEURS DE DONN√âES:')
        top_sites = Site.objects.annotate(
            total_requests=Count('bloodrequest')
        ).order_by('-total_requests')[:5]

        for i, site in enumerate(top_sites, 1):
            self.stdout.write(f'  {i}. {site.nom}: {site.total_requests:,} demandes')

        # Patterns d√©tect√©s
        self.stdout.write('\nüîç PATTERNS D√âTECT√âS:')
        try:
            # Jour le plus actif
            weekday_activity = {}
            for consumption in BloodConsumption.objects.select_related('unit'):
                weekday = consumption.date.weekday()
                weekday_activity[weekday] = weekday_activity.get(weekday, 0) + 1

            if weekday_activity:
                most_active_day = max(weekday_activity.items(), key=lambda x: x[1])
                weekdays = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche']
                self.stdout.write(
                    f'  Jour le plus actif: {weekdays[most_active_day[0]]} ({most_active_day[1]:,} transfusions)')

            # Groupe sanguin le plus demand√©
            blood_demand = {}
            for consumption in BloodConsumption.objects.select_related('unit__donor'):
                bt = consumption.unit.donor.blood_type
                blood_demand[bt] = blood_demand.get(bt, 0) + 1

            if blood_demand:
                top_demand = max(blood_demand.items(), key=lambda x: x[1])
                self.stdout.write(f'  Groupe le plus transfus√©: {top_demand[0]} ({top_demand[1]:,} unit√©s)')

        except Exception:
            self.stdout.write('  Patterns en cours d\'analyse...')

        # Optimisation m√©moire finale
        self.log_memory_usage("Rapport final")

        # Recommandations finales
        self.stdout.write('\nüí° RECOMMANDATIONS RENDER 512MB:')
        self.stdout.write('  ‚úÖ G√©n√©ration optimis√©e pour contraintes m√©moire')
        self.stdout.write('  üîÑ Utiliser pagination pour requ√™tes volumineuses')
        self.stdout.write('  üìä Index cr√©√©s pour performances ML')
        self.stdout.write('  üéØ Donn√©es pr√™tes pour API de pr√©diction')

        self.stdout.write('\nüöÄ G√âN√âRATION TERMIN√âE AVEC SUCC√àS!')
        self.stdout.write('=' * 60)

    def calculate_ml_quality_metrics(self, stats, daily_avg):
        """Calculer m√©triques de qualit√© ML"""

        # 1. Compl√©tude des donn√©es
        expected_min_records = self.history_days * 10  # 10 records/jour minimum
        completeness = min(1.0, sum(stats.values()) / expected_min_records)

        # 2. Diversit√© g√©ographique
        site_count = stats['Sites']
        geographic_diversity = min(1.0, site_count / 15)  # 15 sites = score parfait

        # 3. Consistance temporelle
        if daily_avg > 0:
            # V√©rifier si on a des donn√©es chaque jour
            days_with_data = min(self.history_days, stats['Transfusions'] / max(daily_avg, 1))
            temporal_consistency = days_with_data / max(self.history_days, 1)
        else:
            temporal_consistency = 0

        # 4. √âquilibrage des groupes sanguins
        blood_balance_scores = []
        blood_types = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-']
        expected_distribution = [0.45, 0.30, 0.15, 0.05, 0.025, 0.015, 0.008, 0.002]

        for i, bt in enumerate(blood_types):
            actual_count = Donor.objects.filter(blood_type=bt).count()
            if stats['Donneurs'] > 0:
                actual_percentage = actual_count / stats['Donneurs']
                expected_percentage = expected_distribution[i]
                # Score bas√© sur la proximit√© avec distribution attendue
                deviation = abs(actual_percentage - expected_percentage) / expected_percentage
                balance_score = max(0, 1 - deviation)
                blood_balance_scores.append(balance_score)

        blood_type_balance = sum(blood_balance_scores) / len(blood_balance_scores) if blood_balance_scores else 0

        return {
            'completeness': completeness,
            'geographic_diversity': geographic_diversity,
            'temporal_consistency': temporal_consistency,
            'blood_type_balance': blood_type_balance
        }