# app/management/commands/safe_migrate_and_generate.py
"""
Commande pour g√©rer les migrations existantes et g√©n√©rer des donn√©es proprement
R√©sout le probl√®me de conflits avec tables existantes
"""

from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.db import connection, transaction
from django.conf import settings
import os
import sys


class Command(BaseCommand):
    help = 'G√®re les migrations existantes et g√©n√®re des donn√©es de fa√ßon s√©curis√©e'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force-reset',
            action='store_true',
            help='R√©initialiser compl√®tement la base (ATTENTION: supprime tout)'
        )
        parser.add_argument(
            '--generate-scale',
            type=str,
            choices=['render', 'production', 'enterprise'],
            default='render',
            help='√âchelle de g√©n√©ration des donn√©es'
        )
        parser.add_argument(
            '--skip-data-generation',
            action='store_true',
            help='Passer la g√©n√©ration de donn√©es'
        )

    def handle(self, *args, **options):
        self.stdout.write('üîß GESTIONNAIRE DE MIGRATIONS ET DONN√âES S√âCURIS√â')
        self.stdout.write('=' * 55)

        try:
            # √âtape 1: V√©rifier l'√©tat de la base
            db_state = self.check_database_state()
            self.stdout.write(f'üìä √âtat DB: {db_state}')

            # √âtape 2: G√©rer les migrations selon l'√©tat
            if options['force_reset']:
                self.reset_database_completely()
            else:
                self.handle_existing_migrations()

            # √âtape 3: Assurer que toutes les migrations sont appliqu√©es
            self.ensure_migrations_applied()

            # √âtape 4: G√©n√©ration des donn√©es (optionnel)
            if not options['skip_data_generation']:
                self.generate_optimized_data(options['generate_scale'])

            # √âtape 5: V√©rification finale
            self.verify_final_state()

            self.stdout.write(self.style.SUCCESS('‚úÖ Migration et g√©n√©ration termin√©es avec succ√®s!'))

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur: {e}'))
            import traceback
            traceback.print_exc()
            sys.exit(1)

    def check_database_state(self):
        """V√©rifier l'√©tat actuel de la base de donn√©es"""

        with connection.cursor() as cursor:
            # V√©rifier si les tables principales existent
            cursor.execute("""
                           SELECT table_name
                           FROM information_schema.tables
                           WHERE table_schema = 'public'
                             AND table_name LIKE 'app_%'
                           """)

            existing_tables = [row[0] for row in cursor.fetchall()]

            # Tables critiques attendues
            critical_tables = [
                'app_site', 'app_donor', 'app_patient', 'app_department',
                'app_bloodrecord', 'app_bloodunit', 'app_bloodrequest',
                'app_bloodconsumption', 'app_prevision'
            ]

            missing_tables = [t for t in critical_tables if t not in existing_tables]

            if not existing_tables:
                return 'EMPTY'  # Base vide
            elif missing_tables:
                return f'PARTIAL ({len(missing_tables)} tables manquantes)'
            else:
                # V√©rifier si les tables ont des donn√©es
                total_records = 0
                for table in critical_tables:
                    try:
                        cursor.execute(f'SELECT COUNT(*) FROM "{table}"')
                        count = cursor.fetchone()[0]
                        total_records += count
                    except:
                        pass

                if total_records == 0:
                    return 'SCHEMA_ONLY'  # Structure mais pas de donn√©es
                else:
                    return f'POPULATED ({total_records:,} records)'

    def reset_database_completely(self):
        """R√©initialisation compl√®te de la base (ATTENTION: destructeur)"""

        self.stdout.write('üö® R√âINITIALISATION COMPL√àTE DE LA BASE!')
        self.stdout.write('‚ö†Ô∏è  Toutes les donn√©es seront perdues!')

        with connection.cursor() as cursor:
            # D√©sactiver les contraintes FK
            cursor.execute('SET session_replication_role = replica;')

            # Supprimer toutes les tables de l'app
            cursor.execute("""
                           SELECT table_name
                           FROM information_schema.tables
                           WHERE table_schema = 'public'
                             AND (table_name LIKE 'app_%' OR table_name LIKE 'django_%')
                           """)

            tables = [row[0] for row in cursor.fetchall()]

            for table in tables:
                try:
                    cursor.execute(f'DROP TABLE IF EXISTS "{table}" CASCADE')
                    self.stdout.write(f'  üóëÔ∏è Table {table} supprim√©e')
                except Exception as e:
                    self.stdout.write(f'  ‚ö†Ô∏è {table}: {str(e)[:30]}')

            # R√©activer les contraintes
            cursor.execute('SET session_replication_role = DEFAULT;')

            self.stdout.write('‚úÖ Base r√©initialis√©e')

    def handle_existing_migrations(self):
        """G√©rer les migrations existantes intelligemment"""

        self.stdout.write('üîÑ Gestion des migrations existantes...')

        try:
            # V√©rifier l'√©tat des migrations
            from django.db.migrations.executor import MigrationExecutor
            from django.db import connection

            executor = MigrationExecutor(connection)
            plan = executor.migration_plan(executor.loader.graph.leaf_nodes())

            if plan:
                self.stdout.write(f'üìã {len(plan)} migrations √† appliquer')

                # Appliquer les migrations manquantes
                call_command('migrate', verbosity=1, interactive=False)
                self.stdout.write('‚úÖ Migrations appliqu√©es')
            else:
                self.stdout.write('‚úÖ Toutes les migrations sont √† jour')

                # V√©rifier l'int√©grit√© des tables existantes
                self.verify_table_integrity()

        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è Erreur migrations: {e}')

            # Strat√©gie de r√©cup√©ration: migration fake puis vraie migration
            self.stdout.write('üîß Tentative de r√©cup√©ration...')

            try:
                # Marquer les migrations comme appliqu√©es
                call_command('migrate', '--fake-initial', verbosity=0)
                self.stdout.write('‚úÖ Migrations marqu√©es comme appliqu√©es')
            except Exception as e2:
                self.stdout.write(f'‚ùå R√©cup√©ration √©chou√©e: {e2}')
                raise

    def verify_table_integrity(self):
        """V√©rifier l'int√©grit√© des tables existantes"""

        self.stdout.write('üîç V√©rification int√©grit√© des tables...')

        with connection.cursor() as cursor:
            # V√©rifier que les colonnes critiques existent
            critical_checks = [
                ("app_bloodrecord", "record_id"),
                ("app_bloodunit", "unit_id"),
                ("app_bloodrequest", "request_id"),
                ("app_donor", "donor_id"),
                ("app_patient", "patient_id")
            ]

            for table, column in critical_checks:
                try:
                    cursor.execute(f"""
                        SELECT column_name 
                        FROM information_schema.columns 
                        WHERE table_name = '{table}' AND column_name = '{column}'
                    """)

                    if cursor.fetchone():
                        self.stdout.write(f'  ‚úÖ {table}.{column} OK')
                    else:
                        self.stdout.write(f'  ‚ùå {table}.{column} MANQUANT')

                except Exception as e:
                    self.stdout.write(f'  ‚ö†Ô∏è {table}: {str(e)[:30]}')

    def ensure_migrations_applied(self):
        """S'assurer que toutes les migrations sont appliqu√©es"""

        self.stdout.write('üîÑ V√©rification finale des migrations...')

        try:
            # Migration avec gestion d'erreur
            call_command('migrate', verbosity=1, interactive=False)
            self.stdout.write('‚úÖ Migrations finalis√©es')

            # Cr√©er les index manquants si n√©cessaire
            self.create_missing_indexes()

        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è Avertissement migrations finales: {e}')

    def create_missing_indexes(self):
        """Cr√©er les index manquants pour les performances"""

        self.stdout.write('üìä Cr√©ation des index de performance...')

        indexes_to_create = [
            ('app_bloodunit', 'donor_id', 'btree'),
            ('app_bloodunit', 'status', 'btree'),
            ('app_bloodrecord', 'record_date', 'btree'),
            ('app_bloodrequest', 'request_date', 'btree'),
            ('app_bloodrequest', 'status', 'btree'),
            ('app_bloodconsumption', 'date', 'btree'),
            ('app_donor', 'blood_type', 'btree'),
            ('app_prevision', 'prevision_date', 'btree')
        ]

        with connection.cursor() as cursor:
            for table, column, index_type in indexes_to_create:
                index_name = f'idx_{table}_{column}'

                try:
                    cursor.execute(f"""
                        CREATE INDEX IF NOT EXISTS {index_name} 
                        ON {table} USING {index_type} ({column})
                    """)

                except Exception as e:
                    # Index peut d√©j√† exister, ce n'est pas grave
                    pass

        self.stdout.write('‚úÖ Index de performance cr√©√©s')

    def generate_optimized_data(self, scale):
        """G√©n√©ration des donn√©es avec la nouvelle commande"""

        self.stdout.write(f'üìä G√©n√©ration des donn√©es optimis√©es (√©chelle: {scale})')

        try:
            # Utiliser la nouvelle commande optimis√©e
            call_command(
                'generate_optimized_production_data',
                scale=scale,
                years=2 if scale != 'render' else 1,
                force_clean=True,
                verbosity=1
            )

            self.stdout.write('‚úÖ Donn√©es g√©n√©r√©es avec la commande optimis√©e')

        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è Nouvelle commande √©chou√©e: {e}')

            # Fallback vers l'ancienne commande
            try:
                self.stdout.write('üîÑ Tentative avec l\'ancienne commande...')
                call_command(
                    'generate_massive_production_data',
                    scale='production' if scale != 'render' else 'production',
                    years=1,
                    force_clean=True,
                    verbosity=1
                )

                self.stdout.write('‚úÖ Donn√©es g√©n√©r√©es avec la commande legacy')

            except Exception as e2:
                self.stdout.write(f'‚ö†Ô∏è G√©n√©ration legacy aussi √©chou√©e: {e2}')

                # G√©n√©ration minimale manuelle
                self.generate_minimal_data()

