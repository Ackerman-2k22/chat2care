"""
Django settings for blood bank management system.
Generated by 'django-admin startproject' using Django 5.2.4.
"""
import ssl
import os
import dj_database_url
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-your-default-secret-key-change-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Allowed hosts - crucial for deployment
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    '.render.com',  # Pour Render deployment
    '.onrender.com',
    'high5-code2care-sr7p.onrender.com',
    "high-5-blood2care.vercel.app"# Alternative Render domain
]

# Add your custom domain here when you have one
RENDER_EXTERNAL_HOSTNAME = config('RENDER_EXTERNAL_HOSTNAME', default=None)
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# CORS settings for API access
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://localhost:3000",
    "https://high-5-blood2care.vercel.app"
]

CORS_ALLOW_CREDENTIALS = True

# ✅ AJOUT CRITIQUE : Autoriser les en-têtes personnalisés
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-use-ai-system',
    'cache-control',
    'pragma',
]

# ✅ AJOUT : Autoriser toutes les méthodes HTTP nécessaires
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# ✅ AJOUT : Pour les requêtes avec préflight (OPTIONS)
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 heures

# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'corsheaders',
    'django_filters',
    'django_extensions',
    'django_celery_beat',
]

LOCAL_APPS = [
    'app',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# FIXED: Clean middleware configuration without duplicates
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Pour les fichiers statiques
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add debug toolbar in development - FIXED: Only add once
if DEBUG:
    try:
        import debug_toolbar
        INSTALLED_APPS.append('debug_toolbar')
        MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
        INTERNAL_IPS = ['127.0.0.1', 'localhost']
    except ImportError:
        pass

ROOT_URLCONF = 'bloodbank.urls'  # Adjust this to your project name

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bloodbank.wsgi.application'  # Adjust this to your project name

# Database configuration
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Default database (development)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Production database (PostgreSQL on Render)
DATABASE_URL = config('DATABASE_URL', default=None)
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.parse(DATABASE_URL)

# Redis Configuration with proper SSL handling
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')

if REDIS_URL.startswith('rediss://'):
    # For Redis Cloud SSL connections
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'ssl_cert_reqs': None,  # Remove this problematic parameter
                    'ssl_check_hostname': False,
                    'ssl_context': ssl.create_default_context()
                }
            }
        }
    }

    # Celery Redis Broker SSL configuration
    CELERY_BROKER_URL = REDIS_URL
    CELERY_RESULT_BACKEND = REDIS_URL
    CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
    CELERY_BROKER_USE_SSL = {
        'ssl_cert_reqs': ssl.CERT_NONE,
        'ssl_ca_certs': None,
        'ssl_certfile': None,
        'ssl_keyfile': None,
    }
    CELERY_REDIS_BACKEND_USE_SSL = {
        'ssl_cert_reqs': ssl.CERT_NONE,
        'ssl_ca_certs': None,
        'ssl_certfile': None,
        'ssl_keyfile': None,
    }
else:
    # For local Redis connections
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }

    CELERY_BROKER_URL = REDIS_URL
    CELERY_RESULT_BACKEND = REDIS_URL

# Session configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = True

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        #'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'forecasting': '50/hour',  # Specific limit for AI forecasting
    }
}

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = config('TIME_ZONE', default='UTC')
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional static files directories
STATICFILES_DIRS = [
    BASE_DIR / 'static',
] if (BASE_DIR / 'static').exists() else []

# Whitenoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email configuration
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
if not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
    EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
    EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
    EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@bloodbank.com')

# Logging configuration
# Configuration de logging fusionnée
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
        'debug': {
            'format': '[{asctime}] {levelname} {name}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' if DEBUG else 'simple',
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'django.log',
            'maxBytes': 1024*1024*10,  # 10 MB
            'backupCount': 10,
            'formatter': 'verbose',
            'level': 'INFO',
        },
        'ai_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'ai_forecasting.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
            'level': 'INFO',
        },
        'error_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'errors.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
            'level': 'ERROR',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'app': {  # Your app logger
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'forecasting': {  # AI forecasting logger
            'handlers': ['console', 'ai_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {  # Request errors
            'handlers': ['console', 'error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {  # Database queries (only in debug)
            'handlers': ['console'] if DEBUG else [],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}

# FIXED: Fallback cache configuration that works everywhere
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'default-cache',
        'TIMEOUT': 300,  # 5 minutes default
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,
        }
    },
    'forecasting': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'forecasting-cache',
        'TIMEOUT': 1800,  # 30 minutes for forecasts
        'OPTIONS': {
            'MAX_ENTRIES': 500,
            'CULL_FREQUENCY': 4,
        }
    }
}

# Redis configuration (if available) - override default cache
REDIS_URL = os.getenv('REDIS_URL')
if REDIS_URL and not DEBUG:
    try:
        import ssl

        if REDIS_URL.startswith('rediss://'):
            # SSL Redis configuration
            CACHES['default'] = {
                'BACKEND': 'django_redis.cache.RedisCache',
                'LOCATION': REDIS_URL,
                'OPTIONS': {
                    'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                    'CONNECTION_POOL_KWARGS': {
                        'ssl_cert_reqs': None,
                        'ssl_check_hostname': False,
                        'ssl_context': ssl.create_default_context()
                    }
                },
                'TIMEOUT': 300,
            }
        else:
            # Non-SSL Redis
            CACHES['default'] = {
                'BACKEND': 'django_redis.cache.RedisCache',
                'LOCATION': REDIS_URL,
                'OPTIONS': {
                    'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                },
                'TIMEOUT': 300,
            }
    except Exception as e:
        print(f"Redis configuration failed, using local memory cache: {e}")

# ==================== SECURITY ENHANCEMENTS ====================
# Enhanced security settings

if not DEBUG:
    # Production security
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# ==================== AI SYSTEM CONFIGURATION ====================
# Configuration for the AI forecasting system

AI_FORECASTING_CONFIG = {
    'MAX_EXECUTION_TIME': 120,  # seconds
    'CACHE_TIMEOUT': 1800,  # 30 minutes
    'DEFAULT_FORECAST_DAYS': 7,
    'MAX_FORECAST_DAYS': 30,
    'MODELS': {
        'RANDOM_FOREST': {
            'enabled': True,
            'n_estimators': 50,
            'max_depth': 8,
        },
        'XGBOOST': {
            'enabled': True,  # Will auto-detect availability
            'n_estimators': 50,
            'max_depth': 6,
            'learning_rate': 0.1,
        },
        'ARIMA': {
            'enabled': True,  # Will auto-detect statsmodels
            'max_p': 3,
            'max_d': 2,
            'max_q': 3,
        }
    },
    'BLOOD_TYPES': ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-'],
    'CONFIDENCE_THRESHOLDS': {
        'high': 0.8,
        'medium': 0.6,
        'low': 0.4,
    }
}

# ==================== BLOOD BANK SPECIFIC SETTINGS ====================
# Enhanced blood bank configuration

BLOOD_BANK_SETTINGS = {
    'LOW_STOCK_THRESHOLD': config('LOW_STOCK_THRESHOLD', default=20, cast=int),
    'CRITICAL_STOCK_THRESHOLD': config('CRITICAL_STOCK_THRESHOLD', default=5, cast=int),
    'EXPIRY_WARNING_DAYS': config('EXPIRY_WARNING_DAYS', default=7, cast=int),
    'EXPIRY_CRITICAL_DAYS': config('EXPIRY_CRITICAL_DAYS', default=3, cast=int),
    'AUTO_BACKUP_FREQUENCY': config('AUTO_BACKUP_FREQUENCY', default='daily'),
    'DATA_RETENTION_MONTHS': config('DATA_RETENTION_MONTHS', default=24, cast=int),

    # Notification settings
    'NOTIFICATION_SETTINGS': {
        'LOW_STOCK_ALERTS': config('NOTIFY_LOW_STOCK', default=True, cast=bool),
        'CRITICAL_STOCK_ALERTS': config('NOTIFY_CRITICAL_STOCK', default=True, cast=bool),
        'URGENT_REQUESTS': config('NOTIFY_URGENT_REQUESTS', default=True, cast=bool),
        'SYSTEM_ALERTS': config('NOTIFY_SYSTEM_ALERTS', default=True, cast=bool),
        'DAILY_REPORTS': config('NOTIFY_DAILY_REPORTS', default=False, cast=bool),
        'WEEKLY_REPORTS': config('NOTIFY_WEEKLY_REPORTS', default=True, cast=bool),
        'AI_FORECAST_ALERTS': config('NOTIFY_AI_FORECASTS', default=True, cast=bool),
    },

    # Blood type priorities
    'BLOOD_TYPE_PRIORITIES': {
        'O-': 'critical',  # Universal donor
        'O+': 'high',
        'A-': 'high',
        'A+': 'medium',
        'B-': 'high',
        'B+': 'medium',
        'AB-': 'medium',
        'AB+': 'low',  # Universal recipient
    },

    # Integrations
    'INTEGRATIONS': {
        'DHIS2_ENABLED': config('DHIS2_ENABLED', default=False, cast=bool),
        'DHIS2_URL': config('DHIS2_URL', default=''),
        'HMS_ENABLED': config('HMS_ENABLED', default=False, cast=bool),
        'SMS_GATEWAY_ENABLED': config('SMS_GATEWAY_ENABLED', default=False, cast=bool),
        'LIS_ENABLED': config('LIS_ENABLED', default=False, cast=bool),
        'AI_FORECASTING_ENABLED': config('AI_FORECASTING_ENABLED', default=True, cast=bool),
    }
}

# ==================== EMAIL CONFIGURATION ====================
# Enhanced email settings

if not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
    EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
    EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
    EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
    DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@bloodbank.com')

    # Email templates
    EMAIL_TEMPLATES = {
        'low_stock_alert': 'emails/low_stock_alert.html',
        'forecast_alert': 'emails/forecast_alert.html',
        'daily_report': 'emails/daily_report.html',
        'weekly_report': 'emails/weekly_report.html',
    }
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# ==================== PERFORMANCE OPTIMIZATIONS ====================
# Database and performance settings

# FIXED: Simplified database configuration for maximum compatibility
if 'postgresql' in DATABASES['default']['ENGINE']:
    # Use connection reuse but avoid custom PostgreSQL options that might cause issues
    DATABASES['default']['CONN_MAX_AGE'] = 60  # Reuse connections for 60 seconds

# Session optimization - FIXED: Avoid potential Redis dependency issues
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = False  # Save only when modified

# Static files optimization
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = True

# ==================== MONITORING AND METRICS ====================
# System monitoring configuration

MONITORING_CONFIG = {
    'ENABLE_PERFORMANCE_TRACKING': config('ENABLE_PERFORMANCE_TRACKING', default=True, cast=bool),
    'ENABLE_ERROR_TRACKING': config('ENABLE_ERROR_TRACKING', default=True, cast=bool),
    'METRICS_RETENTION_DAYS': config('METRICS_RETENTION_DAYS', default=30, cast=int),
    'HEALTH_CHECK_ENDPOINTS': [
        '/api/health/',
        '/api/system/health/',
        '/health/',
    ]
}

# ==================== DEVELOPMENT HELPERS ====================
# Development and debugging helpers

if DEBUG:
    # Additional development settings
    INTERNAL_IPS = [
        '127.0.0.1',
        'localhost',
        '0.0.0.0',
    ]

# Print configuration summary
print(f"""
🩸 Blood Bank System Configuration:
   - DEBUG: {DEBUG}
   - Database: {DATABASES['default']['ENGINE'].split('.')[-1]}
   - Cache Backend: {CACHES['default']['BACKEND'].split('.')[-1]}
   - AI Forecasting: {AI_FORECASTING_CONFIG.get('MODELS', {}).get('RANDOM_FOREST', {}).get('enabled', False)}
   - CORS Origins: {len(CORS_ALLOWED_ORIGINS)} configured
   - Logging: {len(LOGGING['handlers'])} handlers configured
""")

# ==================== ERROR HANDLING ====================
# Custom exception handling

def handle_ai_system_errors():
    """Handle AI system import errors gracefully"""
    try:
        import forecasting.blood_demand_forecasting
        return True
    except ImportError as e:
        print(f"⚠️  AI Forecasting system not available: {e}")
        AI_FORECASTING_CONFIG['MODELS']['RANDOM_FOREST']['enabled'] = False
        return False

# Initialize AI system check
AI_SYSTEM_AVAILABLE = handle_ai_system_errors()