#!/bin/bash
# Script de build optimis√© pour Render - Blood Bank System
# Remplace votre commande de build actuelle

set -e  # Arr√™ter en cas d'erreur

echo "üöÄ Build Blood Bank System pour Render..."
echo "M√©moire disponible: 512MB | CPU: 0.1"

# ==================== VARIABLES D'ENVIRONNEMENT ====================
export PYTHONUNBUFFERED=1
export PYTHONDONTWRITEBYTECODE=1
export DJANGO_SETTINGS_MODULE=bloodbank.settings
export PYTHONWARNINGS=ignore

# Optimisation m√©moire Python
export PYTHONHASHSEED=0
export PYTHONOPTIMIZE=1

# ==================== INSTALLATION OPTIMIS√âE DES D√âPENDANCES ====================
echo "üì¶ Installation des d√©pendances avec optimisations m√©moire..."

# Mise √† jour pip avec cache limit√©
pip install --upgrade pip --no-cache-dir

# Installation par chunks pour √©conomiser la m√©moire
echo "  - Installing core dependencies..."
pip install --no-cache-dir Django==5.2.4 djangorestframework==3.16.0 gunicorn==23.0.0

echo "  - Installing database dependencies..."
pip install --no-cache-dir psycopg2==2.9.10 dj-database-url==3.0.1

echo "  - Installing cache and optimization..."
pip install --no-cache-dir django-redis==6.0.0 django-cors-headers==4.7.0 whitenoise==6.9.0

echo "  - Installing ML dependencies (lightweight)..."
pip install --no-cache-dir pandas==2.3.1 numpy==2.3.2 scikit-learn==1.7.1

echo "  - Installing optional ML (if memory permits)..."
pip install --no-cache-dir statsmodels==0.14.5 || echo "statsmodels skipped due to memory constraints"
pip install --no-cache-dir xgboost==3.0.3 || echo "xgboost skipped due to memory constraints"

echo "  - Installing remaining dependencies..."
pip install --no-cache-dir -r requirements.txt || echo "Some optional dependencies skipped"

# ==================== OPTIMISATION PYTHON ====================
echo "üîß Optimisation Python..."

# Nettoyer le cache pip
pip cache purge

# Compiler les bytecodes Python pour optimiser le d√©marrage
python -m compileall . -q || true

# ==================== DJANGO SETUP ====================
echo "‚öôÔ∏è Configuration Django..."

# Collecte des fichiers statiques avec optimisations
echo "üìÅ Collecte des fichiers statiques..."
python manage.py collectstatic --noinput --clear

# Migrations de base de donn√©es
echo "üóÑÔ∏è Migrations de base de donn√©es..."
python manage.py migrate --noinput

# Cr√©ation du superuser par d√©faut (only if command exists)
echo "üë§ Cr√©ation du superuser..."
python manage.py create_default_superuser || echo "‚ö†Ô∏è create_default_superuser command not found, skipping..."

# ==================== G√âN√âRATION DES DONN√âES DE PRODUCTION ====================
echo "üìä G√©n√©ration des donn√©es de production optimis√©e..."

# G√©n√©ration avec scale r√©duite pour Render (only if command exists)
echo "G√©n√©ration avec scale=large (optimis√© pour 512MB RAM)..."
python manage.py generate_production_data --scale=large || {
    echo "‚ö†Ô∏è Erreur g√©n√©ration scale=large, tentative sans arguments..."
    python manage.py generate_production_data || {
        echo "‚ö†Ô∏è generate_production_data command not found, skipping data generation..."
    }
}

# ==================== PR√â-CALCUL DES CACHES ====================
echo "üíæ Pr√©-calcul des caches pour am√©liorer les performances..."

python manage.py shell << 'EOF' || echo "‚ö†Ô∏è Cache pre-calculation failed, continuing..."
import os
import django
from django.core.cache import cache
from django.test import RequestFactory

# Configuration
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bloodbank.settings')
django.setup()

try:
    # Pr√©-calculer le dashboard
    from app.views import DashboardOverviewAPIView
    factory = RequestFactory()
    request = factory.get('/dashboard/overview/')
    view = DashboardOverviewAPIView()
    view.get(request)
    print('‚úì Cache dashboard pr√©-calcul√©')
except Exception as e:
    print(f'‚ö†Ô∏è Erreur pr√©-calcul dashboard: {e}')

try:
    # Pr√©-calculer les recommandations avec m√©thode l√©g√®re
    from app.views import OptimizationRecommendationsAPIView
    factory = RequestFactory()
    request = factory.get('/forecasting/recommendations/')
    view = OptimizationRecommendationsAPIView()

    # Utiliser timeout court pour le build
    view.forecaster.max_execution_time = 30  # 30 secondes max pendant le build
    view.get(request)
    print('‚úì Cache recommandations pr√©-calcul√©')
except Exception as e:
    print(f'‚ö†Ô∏è Erreur pr√©-calcul recommandations: {e}')

try:
    # Pr√©-calculer les pr√©visions l√©g√®res
    from app.forecasting.blood_demand_forecasting import ProductionLightweightForecaster
    forecaster = ProductionLightweightForecaster()

    blood_types = ['O+', 'A+', 'B+', 'AB+', 'O-', 'A-', 'B-', 'AB-']
    for bt in blood_types:
        forecaster.quick_predict_cached(bt, 7)

    print('‚úì Cache pr√©visions pr√©-calcul√©')
except Exception as e:
    print(f'‚ö†Ô∏è Erreur pr√©-calcul pr√©visions: {e}')

print('‚úÖ Pr√©-calcul des caches termin√©')
EOF

# ==================== V√âRIFICATIONS SYST√àME ====================
echo "üîç V√©rifications syst√®me..."

# V√©rification Django
python manage.py check --deploy --fail-level WARNING || {
    echo "‚ö†Ô∏è Avertissements d√©tect√©s mais build continue..."
}

# ==================== NETTOYAGE ====================
echo "üßπ Nettoyage..."
find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
find . -name "*.pyc" -delete 2>/dev/null || true

echo "‚úÖ D√©ploiement termin√© avec succ√®s!"

# ==================== INFORMATIONS DE D√âMARRAGE ====================
echo ""
echo "üìã Informations de d√©marrage:"
echo "- Serveur: Gunicorn avec configuration optimis√©e"
echo "- Workers: 1 (optimis√© pour 512MB RAM)"
echo "- Timeout: 180s (3 minutes)"
echo "- Cache: Activ√© (Redis recommand√©)"
echo ""
echo "üîó Endpoints principaux:"
echo "- Dashboard: /dashboard/overview/"
echo "- API Root: /api/"
echo "- Admin: /admin/"
echo "- Health Check: /health/"
echo ""
echo "‚ö†Ô∏è  Notes importantes:"
echo "- Le forecasting utilise un cache de 30 minutes"
echo "- Les calculs lourds sont optimis√©s pour √©viter les timeouts"
echo "- Surveillez les logs pour les performances"
echo ""

echo "‚úÖ Build script completed successfully!"